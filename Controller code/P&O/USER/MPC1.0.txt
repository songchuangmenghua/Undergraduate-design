	float Q=5.3,SOCr=0.85;
	float deltPfcUpper=150,	deltPfcLow=-150,	deltPbUpper=1000,  deltPbLow=-1000;
	float PfcUpper=600,  PfcLow=0,	PbUpper=1000,  PbLow=-200;
	float SOCH=1,     SOCL=0.4, CH=50, CL=-50;
	const float a=0.0095;
	const float p_batPSOC[3]={0.01997,0.01102,-0.0114};
	const float	w1=5, w2=10, w3=1, w4=0.5;
	float h,k,	miu=0.1;
	float ycs[2][1]={0,0},u[2][1]={0,0},ACS[lACS][cACS]={0,0,0,1 },BCS[2][2]={0,0,0 ,0},BP[1][2]={1,1};
	float W2[lACS*Np][lACS*Np]={0},W3[Np][Np]={0};
	float GP[cBP*Np][lBP]={0},GCS[cBCS*Np][lBCS]={0},FCS[cACS*Np][lACS]={0},PhiP[cBP*Np][lBP*Nc]={0},PhiCS[cBCS*Np][lBCS*Nc]={0};
	float SOCR[cBCS*Np][1]={0},ec[1][2]={w1,0},Ec[1][cYCS*Np]={0},PR[Np][1]={0};
	float E[lBP*Nc][lBP*Nc]={0},deltUB[lBP*Nc][1]={0},deltLB[lBP*Nc][1]={0},UB[lBP*Nc][1]={0},LB[lBP*Nc][1]={0};
	float U[lBP*Nc][1]={0},YUB[lACS*Np][1]={0},YLB[lACS*Np][1]={0},EUU[lBP*Nc][lBP*Nc]={0};
	float LB_U[lBP*Nc][1]={0},UB_U[lBP*Nc][1]={0},PhiCS_LB[lACS*Np][1]={0},PhiCS_UB[lACS*Np][1]={0};
	float H[lBCS*Nc][lBCS*Nc]={0},H_cal[lBCS*Nc*lBCS*Nc]={0},f[lBCS*Nc][1]={0},f_cal[lBCS*Nc]={0};
	float LB_cal[lBP*Nc]={0},UB_cal[lBP*Nc]={0},lbA_cal[lBP*Nc+cACS*Np]={0},ubA_cal[lBP*Nc+cACS*Np]={0},A_cal[(lBP*Nc+cACS*Np)*lBP*Nc]={0};
	float FCSycs[cACS*Np][1]={0},GCSu[cBCS*Np][1]={0};
	float dt=0.1,Ubus=24,SOC=1,Cehc=0,Pfc=10,Pb=20,Pd=100;
	float ret=0;
	u8 i=0,j=0,kk=0;
	
    Cache_Enable();                 //打开L1-Cache
    HAL_Init();				        //初始化HAL库
    Stm32_Clock_Init(432,25,2,9);   //设置时钟,216Mhz 
    delay_init(216);                //延时初始化
		uart_init(115200);
		LED_Init();
	
	
	h=dt/3600/Q/Ubus;
	k=1-2*miu*(SOC-0.5*(SOCH+SOCL))/(SOCH-SOCL);
	ycs[0][0]=Cehc,ycs[1][0]=SOC;
	u[0][0]=Pfc,u[1][0]=Pb;
	ACS[0][1]=p_batPSOC[2];
	BCS[0][0]=a;
	BCS[0][1]=p_batPSOC[1];
	BCS[1][1]=-k*h;
	for (i=0;i<Np;i++)
	{
		W2[cYCS*i+1][cYCS*i+1]=w2;
		SOCR[cYCS*i][0]=SOCr;
		Ec[0][cYCS*i]=w1;
		PR[i][0]=Pd;
		W3[i][i]=w3;
	}
	if(cACS ==cBCS && lACS == lBCS)
	{
	for (i=1;i<=Np;i++)
	{
		for (j=0;j<cACS;j++)
		{
			for (kk=0;kk<lACS;kk++)
			{
				FCS[(i-1)*cACS+j][kk]=ACS[j][kk];
				GCS[(i-1)*cACS+j][kk]=BCS[j][kk];
			}
		}
	}
}
	
	for (i=1;i<=Np;i++)
	{
		for (j=0;j<cBP;j++)
		{
			for (kk=0;kk<lBP;kk++)
			{
				GP[(i-1)*cBP+j][kk]=BP[j][kk];
			}
		}
	}	
	for(i=0;i<lBCS*Nc;i=i+lBCS)
	{
		for(j=(i*cBCS)>>1;j<cBCS*Np;j=j+cBCS)
		{
			PhiCS[j][i]=BCS[0][0];
			PhiCS[j][i+1]=BCS[0][1];
			PhiCS[j+1][i]=BCS[1][0];
			PhiCS[j+1][i+1]=BCS[1][1];
		}
	}
	for(i=0;i<lBP*Nc;i=i+lBP)
	{
		for(j=(i*cBP)>>1;j<cBP*Np;j=j+cBP)
		{
			PhiP[j][i]=BP[0][0];
			PhiP[j][i+1]=BP[0][1];
		}
	}
	for(i=0;i<lBP*Nc;i++)
	{
		E[i][i]=1;
	}
	for(i=0;i<Nc*lBP;i=i+lBP)
	{
		deltUB[i][0]=deltPfcUpper;
		deltUB[i+1][0]=deltPbUpper;
    deltLB[i][0]=deltPfcLow;
		deltLB[i+1][0]=deltPbLow;
    UB[i][0]=PfcUpper;
		UB[i+1][0]=PbUpper;
    LB[i][0]=PfcLow;
		LB[i+1][0]=PbLow;
    U[i][0]=Pfc;
		U[i+1][0]=Pb;
	}
	for(i=0;i<Np*lACS;i=i+lBP)
	{
		YUB[i][0]=CH;
		YUB[i+1][0]=SOCH;
		YLB[i][0]=CL;
		YLB[i+1][0]=SOCL;
	}
	for(i=0;i<lBP*Nc;i=i+lBP)
	{
		for(j=(i*lBP)>>1;j<lBP*Nc;j=j+lBP)
		{
				EUU[j][i]=1;
				EUU[j+1][i+1]=1;
		}
	}
	for(i=0;i<Nc*lBP;i++)
	{
		LB_cal[i]=LB[i][0];
		UB_cal[i]=UB[i][0];
	}
	for(i=0;i<lBCS*Nc;i++)
	{
		LB_U[i][0]=LB[i][0]-U[i][0];
		UB_U[i][0]=UB[i][0]-U[i][0];
	}
	
//矩阵乘法
	for (i = 0; i < cACS*Np; i++)
	{
			for (j = 0; j < lACS; j++)
			{
					ret = 0;
					for (kk = 0; kk < 1+1; kk++)
					{
							ret += FCS[i][kk] * ycs[kk][j];   //按照矩阵的乘法规则进行运算
					}
					FCSycs[i][j] = ret;
			}
	}
	
	for (i = 0; i < cBCS*Np; i++)
	{
			for (j = 0; j < lBCS; j++)
			{
					ret = 0;
					for (kk = 0; kk < 1+1; kk++)
					{
							ret += GCS[i][kk] * u[kk][j];   //按照矩阵的乘法规则进行运算
					}
					GCSu[i][j] = ret;
			}
	}



	
	
	printf("EUU \r\n");

	for(i=0;i<lBCS*Nc;i++)
	{
		for(j=0;j<lBCS*Nc;j++)
		{
			printf("%0.2f ",EUU[i][j]);
		}
		printf("\r\n");
	}
	
	
	
//	printf("W2\r\n");
//	for(i=0;i<cYCS*Np;i++)
//	{for(j=0;j<cYCS*Np;j++)
//		
//	{printf(" %0.4f",W2[i][j]);}
//	printf("\r\n");
//	}
//	printf("SOCR   Ec\r\n");
//	for(i=0;i<cYCS*Np;i++)
//	{
//		printf(" %0.4f   %0.4f\r\n",SOCR[i][0],Ec[0][i]);
//	}
//		printf("PR\r\n");
//	for(i=0;i<Np;i++)
//	{
//		printf(" %0.4f\r\n",PR[i][0]);
//	}
//	printf("FCS\r\n");
//	for(i=0;i<cACS*Np;i++)
//	{
//		for(j=0;j<lACS;j++)
//		{
//			printf(" %0.4f",FCS[i][j]);
//		}
//		printf("\r\n");
//	}
//		printf("GCS\r\n");
//	for(i=0;i<cBCS*Np;i++)
//	{
//		for(j=0;j<lBCS;j++)
//		{
//			printf(" %0.16f",GCS[i][j]);
//		}
//		printf("\r\n");
//	}
//	printf("GP\r\n");
//	for(i=0;i<cBP*Np;i++)
//	{
//		for(j=0;j<lBP;j++)
//		{
//			printf(" %0.4f",GP[i][j]);
//		}
//		printf("\r\n");
//	}
//	printf("PhiCS\r\n");
//	for(i=0;i<cBCS*Np;i++)
//	{
//		for(j=0;j<lBCS*Nc;j++)
//		{
//			printf(" %0.4f",PhiCS[i][j]);
//		}
//		printf("\r\n");
//	}
//	printf("PhiP\r\n");
//	for(i=0;i<cBP*Np;i++)
//	{
//		for(j=0;j<lBP*Nc;j++)
//		{
//			printf(" %0.4f",PhiP[i][j]);
//		}
//		printf("\r\n");
//	}	
	printf("E\r\n");
	for(i=0;i<lBP*Nc;i++)
	{
		for(j=0;j<lBP*Nc;j++)
		{ 
		printf(" %0.2f",E[i][j]);
		}
		printf("\r\n");
	}
//	printf("deltUB   deltLB    UB    LB    U\r\n");
//	for(i=0;i<lBP*Nc;i++)
//	{
//		printf(" %0.2f  %0.2f  %0.2f  %0.2f  %0.2f  \r\n",deltUB[i][0],deltLB[i][0],UB[i][0],LB[i][0],U[i][0]);
//	}
//	printf("YUB  YLB  \r\n");
//	for(i=0;i<lACS*Np;i++)
//	{
//		printf("%0.2f   %0.2f\r\n",YUB[i][0],YLB[i][0]);
//	}
